# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from base.model import util
from base.model.base_model_ import Model


class Order(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, symbol: str=None, action: str=None, amount: int=None, price: float=None, price_type: int=None, type: str=None):  # noqa: E501
        """Order - a model defined in Swagger

        :param symbol: The symbol of this Order.  # noqa: E501
        :type symbol: str
        :param action: The action of this Order.  # noqa: E501
        :type action: str
        :param amount: The amount of this Order.  # noqa: E501
        :type amount: int
        :param price: The price of this Order.  # noqa: E501
        :type price: float
        :param price_type: The price_type of this Order.  # noqa: E501
        :type price_type: int
        :param type: The type of this Order.  # noqa: E501
        :type type: str
        """
        self.swagger_types = {
            'symbol': str,
            'action': str,
            'amount': int,
            'price': float,
            'price_type': int,
            'type': str
        }

        self.attribute_map = {
            'symbol': 'symbol',
            'action': 'action',
            'amount': 'amount',
            'price': 'price',
            'price_type': 'priceType',
            'type': 'type'
        }

        self._symbol = symbol
        self._action = action
        self._amount = amount
        self._price = price
        self._price_type = price_type
        self._type = type

    @classmethod
    def from_dict(cls, dikt) -> 'Order':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Order of this Order.  # noqa: E501
        :rtype: Order
        """
        return util.deserialize_model(dikt, cls)

    @property
    def symbol(self) -> str:
        """Gets the symbol of this Order.

        股票代码  # noqa: E501

        :return: The symbol of this Order.
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol: str):
        """Sets the symbol of this Order.

        股票代码  # noqa: E501

        :param symbol: The symbol of this Order.
        :type symbol: str
        """

        self._symbol = symbol

    @property
    def action(self) -> str:
        """Gets the action of this Order.

        BUY/SELL  # noqa: E501

        :return: The action of this Order.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action: str):
        """Sets the action of this Order.

        BUY/SELL  # noqa: E501

        :param action: The action of this Order.
        :type action: str
        """

        self._action = action

    @property
    def amount(self) -> int:
        """Gets the amount of this Order.

        股票数量  # noqa: E501

        :return: The amount of this Order.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount: int):
        """Sets the amount of this Order.

        股票数量  # noqa: E501

        :param amount: The amount of this Order.
        :type amount: int
        """

        self._amount = amount

    @property
    def price(self) -> float:
        """Gets the price of this Order.

        股票价格  # noqa: E501

        :return: The price of this Order.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price: float):
        """Sets the price of this Order.

        股票价格  # noqa: E501

        :param price: The price of this Order.
        :type price: float
        """

        self._price = price

    @property
    def price_type(self) -> int:
        """Gets the price_type of this Order.

        TODO  # noqa: E501

        :return: The price_type of this Order.
        :rtype: int
        """
        return self._price_type

    @price_type.setter
    def price_type(self, price_type: int):
        """Sets the price_type of this Order.

        TODO  # noqa: E501

        :param price_type: The price_type of this Order.
        :type price_type: int
        """

        self._price_type = price_type

    @property
    def type(self) -> str:
        """Gets the type of this Order.

        TODO  # noqa: E501

        :return: The type of this Order.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Order.

        TODO  # noqa: E501

        :param type: The type of this Order.
        :type type: str
        """

        self._type = type
