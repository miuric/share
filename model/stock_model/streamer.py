# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401
from enum import Enum

from typing import List, Dict  # noqa: F401

from base.model import util
from base.model.base_model_ import Model


class StreamerStatusEnum(Enum):
    NO_EXECUTE = "未执行"
    EXECUTE = "执行中"


class Streamer(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, status: str=None, group_no: str=None, qq: str=None, name: str=None, space_percent: str=None, one_found: float=None, multi_one_found: float=None, buy_words: str=None, sell_words: str=None, disable_words: str=None, start_words: str=None, end_words: str=None):  # noqa: E501
        """Streamer - a model defined in Swagger

        :param id: The id of this Streamer.  # noqa: E501
        :type id: int
        :param status: The status of this Streamer.  # noqa: E501
        :type status: str
        :param group_no: The group_no of this Streamer.  # noqa: E501
        :type group_no: str
        :param qq: The qq of this Streamer.  # noqa: E501
        :type qq: str
        :param name: The name of this Streamer.  # noqa: E501
        :type name: str
        :param space_percent: The space_percent of this Streamer.  # noqa: E501
        :type space_percent: str
        :param one_found: The one_found of this Streamer.  # noqa: E501
        :type one_found: float
        :param multi_one_found: The multi_one_found of this Streamer.  # noqa: E501
        :type multi_one_found: float
        :param buy_words: The buy_words of this Streamer.  # noqa: E501
        :type buy_words: str
        :param sell_words: The sell_words of this Streamer.  # noqa: E501
        :type sell_words: str
        :param disable_words: The disable_words of this Streamer.  # noqa: E501
        :type disable_words: str
        :param start_words: The start_words of this Streamer.  # noqa: E501
        :type start_words: str
        :param end_words: The end_words of this Streamer.  # noqa: E501
        :type end_words: str
        """
        self.swagger_types = {
            'id': int,
            'status': str,
            'group_no': str,
            'qq': str,
            'name': str,
            'space_percent': str,
            'one_found': float,
            'multi_one_found': float,
            'buy_words': str,
            'sell_words': str,
            'disable_words': str,
            'start_words': str,
            'end_words': str
        }

        self.attribute_map = {
            'id': 'id',
            'status': 'status',
            'group_no': 'group_no',
            'qq': 'qq',
            'name': 'name',
            'space_percent': 'space_percent',
            'one_found': 'one_found',
            'multi_one_found': 'multi_one_found',
            'buy_words': 'buy_words',
            'sell_words': 'sell_words',
            'disable_words': 'disable_words',
            'start_words': 'start_words',
            'end_words': 'end_words'
        }

        self._id = id
        self._status = status
        self._group_no = group_no
        self._qq = qq
        self._name = name
        self._space_percent = space_percent
        self._one_found = one_found
        self._multi_one_found = multi_one_found
        self._buy_words = buy_words
        self._sell_words = sell_words
        self._disable_words = disable_words
        self._start_words = start_words
        self._end_words = end_words

    @classmethod
    def from_dict(cls, dikt) -> 'Streamer':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Streamer of this Streamer.  # noqa: E501
        :rtype: Streamer
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Streamer.


        :return: The id of this Streamer.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Streamer.


        :param id: The id of this Streamer.
        :type id: int
        """

        self._id = id

    @property
    def status(self) -> str:
        """Gets the status of this Streamer.


        :return: The status of this Streamer.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this Streamer.


        :param status: The status of this Streamer.
        :type status: str
        """

        self._status = status

    @property
    def group_no(self) -> str:
        """Gets the group_no of this Streamer.


        :return: The group_no of this Streamer.
        :rtype: str
        """
        return self._group_no

    @group_no.setter
    def group_no(self, group_no: str):
        """Sets the group_no of this Streamer.


        :param group_no: The group_no of this Streamer.
        :type group_no: str
        """

        self._group_no = group_no

    @property
    def qq(self) -> str:
        """Gets the qq of this Streamer.


        :return: The qq of this Streamer.
        :rtype: str
        """
        return self._qq

    @qq.setter
    def qq(self, qq: str):
        """Sets the qq of this Streamer.


        :param qq: The qq of this Streamer.
        :type qq: str
        """

        self._qq = qq

    @property
    def name(self) -> str:
        """Gets the name of this Streamer.


        :return: The name of this Streamer.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Streamer.


        :param name: The name of this Streamer.
        :type name: str
        """

        self._name = name

    @property
    def space_percent(self) -> str:
        """Gets the space_percent of this Streamer.


        :return: The space_percent of this Streamer.
        :rtype: str
        """
        return self._space_percent

    @space_percent.setter
    def space_percent(self, space_percent: str):
        """Sets the space_percent of this Streamer.


        :param space_percent: The space_percent of this Streamer.
        :type space_percent: str
        """

        self._space_percent = space_percent

    @property
    def one_found(self) -> float:
        """Gets the one_found of this Streamer.


        :return: The one_found of this Streamer.
        :rtype: float
        """
        return self._one_found

    @one_found.setter
    def one_found(self, one_found: float):
        """Sets the one_found of this Streamer.


        :param one_found: The one_found of this Streamer.
        :type one_found: float
        """

        self._one_found = one_found

    @property
    def multi_one_found(self) -> float:
        """Gets the multi_one_found of this Streamer.


        :return: The multi_one_found of this Streamer.
        :rtype: float
        """
        return self._multi_one_found

    @multi_one_found.setter
    def multi_one_found(self, multi_one_found: float):
        """Sets the multi_one_found of this Streamer.


        :param multi_one_found: The multi_one_found of this Streamer.
        :type multi_one_found: float
        """

        self._multi_one_found = multi_one_found

    @property
    def buy_words(self) -> str:
        """Gets the buy_words of this Streamer.


        :return: The buy_words of this Streamer.
        :rtype: str
        """
        return self._buy_words

    @buy_words.setter
    def buy_words(self, buy_words: str):
        """Sets the buy_words of this Streamer.


        :param buy_words: The buy_words of this Streamer.
        :type buy_words: str
        """

        self._buy_words = buy_words

    @property
    def sell_words(self) -> str:
        """Gets the sell_words of this Streamer.


        :return: The sell_words of this Streamer.
        :rtype: str
        """
        return self._sell_words

    @sell_words.setter
    def sell_words(self, sell_words: str):
        """Sets the sell_words of this Streamer.


        :param sell_words: The sell_words of this Streamer.
        :type sell_words: str
        """

        self._sell_words = sell_words

    @property
    def disable_words(self) -> str:
        """Gets the disable_words of this Streamer.


        :return: The disable_words of this Streamer.
        :rtype: str
        """
        return self._disable_words

    @disable_words.setter
    def disable_words(self, disable_words: str):
        """Sets the disable_words of this Streamer.


        :param disable_words: The disable_words of this Streamer.
        :type disable_words: str
        """

        self._disable_words = disable_words

    @property
    def start_words(self) -> str:
        """Gets the start_words of this Streamer.


        :return: The start_words of this Streamer.
        :rtype: str
        """
        return self._start_words

    @start_words.setter
    def start_words(self, start_words: str):
        """Sets the start_words of this Streamer.


        :param start_words: The start_words of this Streamer.
        :type start_words: str
        """

        self._start_words = start_words

    @property
    def end_words(self) -> str:
        """Gets the end_words of this Streamer.


        :return: The end_words of this Streamer.
        :rtype: str
        """
        return self._end_words

    @end_words.setter
    def end_words(self, end_words: str):
        """Sets the end_words of this Streamer.


        :param end_words: The end_words of this Streamer.
        :type end_words: str
        """

        self._end_words = end_words
